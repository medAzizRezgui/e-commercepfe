import { loadStripe } from '@stripe/stripe-js';
import axios from 'axios';
import Head from 'next/head';
import { useRouter } from 'next/router';
import React, { useEffect, useState } from 'react';

import stripeConfig from '../../../config';
import { Input } from '../../components/pages/account/Input';
import { Route } from '../../components/pages/Product/Route';
import { Categories } from '../../components/shared/Categories';
import { Header } from '../../components/shared/Header';
import { useCart } from '../../context/Cart/CartContext';

const stripePromise = loadStripe(stripeConfig.publicKey);

const Checkout = () => {
  const [user, setUser] = useState();
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [region, setRegion] = useState('');
  const [town, setTown] = useState('');
  const [phoneNumber, setPhoneNumber] = useState();
  const [zipCode, setZipCode] = useState();
  const [street, setStreet] = useState('');

  const { cartItems } = useCart();
  const router = useRouter();

  function calculateTotal() {
    const total = cartItems.reduce(
      (acc, item) => acc + item.price * item.quantity,
      0
    );

    return total.toFixed(2);
  }

  const handleCheckout = async (id: string) => {
    const stripe = await stripePromise;

    try {
      const response = await axios.post('/api/checkout/create-session', {
        cartItems,
        id,
      });

      const session = response.data;

      await stripe.redirectToCheckout({ sessionId: session.id });
    } catch (error) {
      console.log(error);
    }
  };

  const handleAddOrder = async () => {
    await axios
      .post('http://localhost:5000/order/addOrder', {
        fullname: `${firstName} ${lastName}`,
        email: user?.email,
        shippingAddress: {
          region,
          city: town,
          postalCode: zipCode,
          street,
        },
        phoneNumber,
        Products: cartItems.map((item) => ({
          name: item.name,
          qty: item.quantity,
          item_price: item.price,
          image: item.image,
        })),
        totalPrice: calculateTotal(),
        coupon: router.query.coupon,
      })
      .then((r) => handleCheckout(r.data._id));
  };
  useEffect(() => {
    const getUser = () => {
      const res = window.localStorage.getItem('user');
      if (res) {
        setUser(JSON.parse(res));
      }
      if (!res) {
        router.push('/auth');
      }
    };
    getUser();
  }, []);

  if (!user) return <h1>Loading...</h1>;
  return (
    <>
      <Head>
        <title>Checkout</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Header />
        {/* Categories */}
        <Categories />
        <div className="mt-112  w-full" />
        <Route />
        <h1 className="text-display-md text-center py-40">Checkout</h1>

        <div className="w-full max-w-[1400px] mx-auto flex items-start justify-between ">
          {/* INPUTS */}
          <div className="w-[60%] p-24 ">
            <h1 className="w-full pb-8 text-display-sm border-b-2 border-gray-500">
              Billing Details
            </h1>

            <div className="flex items-center my-20 justify-between gap-[20px]">
              <Input
                label="First Name*"
                value={firstName}
                type="text"
                setValue={setFirstName}
                placeholder="Name..."
              />
              <Input
                label="Last Name*"
                value={lastName}
                type="text"
                setValue={setLastName}
                placeholder="Name..."
              />
            </div>

            <p className="py-8">Region</p>
            <select
              onChange={(e) => setRegion(e.currentTarget.value)}
              className="border-[1px] border-gray-400 mb-8 w-full rounded-full px-24 py-8 "
            >
              <option disabled>Sélectionner</option>
              <option value="Ariana">Ariana</option>
              <option value="Béja">Béja</option>
              <option value="Ben Arous">Ben Arous</option>
              <option value="Bizerte">Bizerte</option>
              <option value="Gabes">Gabes</option>
              <option value="Gafsa">Gafsa</option>
              <option value="Jendouba">Jendouba</option>
              <option value="Kairouan">Kairouan</option>
              <option value="Kasserine">Kasserine</option>
              <option value="Kebili">Kebili</option>
              <option value="La Manouba">La Manouba</option>
              <option value="Le Kef">Le Kef</option>
              <option value="Mahdia">Mahdia</option>
              <option value="Médenine">Médenine</option>
              <option value="Monastir">Monastir</option>
              <option value="Nabeul">Nabeul</option>
              <option value="Sfax">Sfax</option>
              <option value="Sidi Bouzid">Sidi Bouzid</option>
              <option value="Siliana">Siliana</option>
              <option value="Sousse">Sousse</option>
              <option value="Tataouine">Tataouine</option>
              <option value="Tozeur">Tozeur</option>
              <option value="Tunis">Tunis</option>
              <option value="Zaghouan">Zaghouan</option>
            </select>
            <Input
              label="Ville *"
              value={town}
              type="text"
              setValue={setTown}
              placeholder="Name..."
            />
            <Input
              label="Street address *"
              value={street}
              type="text"
              setValue={setStreet}
              placeholder="Last Name..."
            />
            <Input
              label="ZipCode*"
              value={zipCode}
              type="number"
              setValue={setZipCode}
              placeholder="ZipCode..."
            />
            <Input
              label="Phone*"
              value={phoneNumber}
              type="number"
              setValue={setPhoneNumber}
              placeholder="Num Tel..."
            />
            <Input
              label="Email*"
              value={user?.email}
              type="email"
              setValue={() => {}}
              placeholder="Email..."
            />
          </div>

          {/* Details */}
          <div className="w-[40%] p-24 rounded-[4px]  bg-gray-300">
            <h1 className="w-full pb-8 text-display-sm border-b-2 border-gray-500">
              Your order
            </h1>

            <div className="flex font-semibold border-b-2 border-gray-500 pt-24 pb-8 items-center justify-between w-full">
              <p>Product</p>
              <p>Subtotal</p>
            </div>

            <div className="flex flex-col  border-b-2 border-gray-500 pt-24 pb-8 items-center justify-between w-full">
              {cartItems?.map((item) => (
                <div className="flex justify-between w-full">
                  <p>
                    {item.name}{' '}
                    <span className="font-semibold">x {item.quantity}</span>
                  </p>
                  <p>{(item.price * item.quantity).toFixed(2)} DT</p>
                </div>
              ))}
            </div>

            <div className="flex  border-b-2 border-gray-500 pt-24 pb-8 items-center justify-between w-full">
              <p className="font-semibold">Subtotal</p>
              <p>{calculateTotal()} DT</p>
            </div>

            <div className="flex font-semibold  border-b-2 border-gray-400 pt-24 pb-8 items-center justify-between w-full">
              <p>Total</p>
              <p>{calculateTotal()} DT</p>
            </div>

            <button
              onClick={handleAddOrder}
              className="bg-yellow-500 text-dark-500 w-full text-center rounded-full py-8 font-semibold text-display-xs my-20"
            >
              Place Order
            </button>
          </div>
        </div>
      </main>
    </>
  );
};

export default Checkout;
