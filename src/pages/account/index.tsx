import * as Tabs from '@radix-ui/react-tabs';
import axios from 'axios';
import Head from 'next/head';
import { useRouter } from 'next/router';
import React, { useEffect, useState } from 'react';
import { BiChevronRight, BiEdit, BiTrash } from 'react-icons/bi';

import { Input } from '../../components/pages/account/Input';
import { Product } from '../../components/pages/account/ManageProd/Product';
import { Menu } from '../../components/pages/account/Menu';
import { ProductInputs } from '../../components/pages/account/ProductInputs';
import { CategoriesSelect } from '../../components/pages/account/ProductInputs/CategoriesSelect';
import { Categories } from '../../components/shared/Categories';
import { Header } from '../../components/shared/Header';
import { Product as ProdType } from '../../types/Product';

const Account = ({
  prods,
  categories,
  sousCategories,
}: {
  prods: ProdType[];
  categories: any;
  sousCategories: any;
}) => {
  const [categorieName, setCategorieName] = useState('');
  const [sousCategorieName, setSousCategorieName] = useState('');
  const [activeTab, setActiveTab] = useState(0);
  const [user, setUser] = useState();
  const router = useRouter();
  const [refetch, setRefetch] = useState(false);
  const [selectCategories, setSelectCategories] = useState([
    { value: 'option1', label: 'Option 1' },
    { value: 'option2', label: 'Option 2' },
    { value: 'option3', label: 'Option 3' },
  ]);
  const [categorie, setCategorie] = useState({ value: '', label: '' });
  useEffect(() => {
    const getUser = () => {
      const res = window.localStorage.getItem('user');
      if (res) {
        setUser(JSON.parse(res));
      }
      if (!res) {
        router.push('/auth');
      }
    };
    getUser();
  }, []);

  if (!user) return;
  const handleAddCategorie = async () => {
    await axios
      .post('http://localhost:5000/categorie/add', {
        name: categorieName,
      })
      .then(() => setRefetch(!refetch));
  };

  const handleAddSousCategorie = async () => {
    await axios.post('http://localhost:5000/sousCat/add', {
      name: sousCategorieName,
      categorie: categorie.value,
    });
  };
  const updateCategorie = async (id) => {
    await axios
      .patch(`http://localhost:5000/categorie/${id}`, {
        name: 'New',
      })
      .then(() => console.log('done'))
      .catch((e) => {
        console.error(e);
      });
  };
  const deleteCategorie = async (id) => {
    await axios
      .delete(`http://localhost:5000/categorie/delete/${id}`)
      .then(() => console.log('done'))
      .catch((e) => {
        console.error(e);
      });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Header />
        {/* Categories */}
        <Categories />
        <div className="max-w-[1400px]  text-text-sm gap-[10px] px-16 flex items-center mx-auto py-16">
          {/* Route */}
          <h1>Home</h1>
          <BiChevronRight className="w-[20px] h-[20px]" />
          <h1>My account</h1>
        </div>
        <div className="full my-20 flex flex-col gap-[10px] max-w-[1400px] mx-auto">
          {/*  Add Prod Form */}
          <h1 className="text-center text-display-md font-medium">
            My Account
          </h1>
          <div className="flex w-full gap-[40px]">
            {/* Menu */}
            <Menu setActiveTab={setActiveTab} activeTab={activeTab} />
            {activeTab === 0 && (
              //   Product Inputs

              <Tabs.Root className="TabsRoot" defaultValue="tab1">
                <Tabs.List
                  className="TabsList"
                  aria-label="Manage your account"
                >
                  <Tabs.Trigger className="TabsTrigger" value="tab1">
                    Add
                  </Tabs.Trigger>
                  <Tabs.Trigger className="TabsTrigger" value="tab2">
                    Manage
                  </Tabs.Trigger>
                </Tabs.List>
                <Tabs.Content value="tab1">
                  <div className="mt-8">
                    <ProductInputs />
                  </div>
                </Tabs.Content>
                <Tabs.Content value="tab2">
                  {prods?.map((item) => (
                    <Product item={item} />
                  ))}
                </Tabs.Content>
              </Tabs.Root>
            )}

            {activeTab === 1 && (
              <Tabs.Root className="TabsRoot" defaultValue="tab1">
                <Tabs.List
                  className="TabsList"
                  aria-label="Manage your account"
                >
                  <Tabs.Trigger className="TabsTrigger" value="tab1">
                    Add
                  </Tabs.Trigger>
                  <Tabs.Trigger className="TabsTrigger" value="tab2">
                    Manage
                  </Tabs.Trigger>
                </Tabs.List>
                <Tabs.Content value="tab1">
                  <div className="mt-8">
                    <div className="w-full flex-col w-full">
                      <div className="">
                        <Input
                          label="Categorie"
                          value={categorieName}
                          type="text"
                          setValue={setCategorieName}
                          placeholder="Categorie Name..."
                        />
                        <button
                          className="bg-green-400 h-max "
                          type="button"
                          onClick={() => handleAddCategorie()}
                        >
                          Add
                        </button>
                      </div>
                      <CategoriesSelect
                        categories={selectCategories}
                        setCategories={setSelectCategories}
                        setCategorie={setCategorie}
                        categorie={categorie}
                        refetch={refetch}
                      />
                      <Input
                        label="Sous Categorie"
                        value={sousCategorieName}
                        type="text"
                        setValue={setSousCategorieName}
                        placeholder="Sous Categorie Name..."
                      />

                      <button
                        type="button"
                        onClick={() => handleAddSousCategorie()}
                      >
                        Add
                      </button>
                    </div>
                  </div>
                </Tabs.Content>
                <Tabs.Content value="tab2">
                  <div className="w-full flex  mt-8 justify-between">
                    <div className="w-full pr-40">
                      <h1 className="text-text-lg pb-14  font-medium">
                        Categories
                      </h1>
                      {/* eslint-disable-next-line @typescript-eslint/ban-ts-comment */}
                      {/* @ts-ignore */}
                      {categories.map((item) => (
                        <div className="flex border-b-[1px] border-gray-500 pb-8 items-center w-full justify-between">
                          <h1>{item.name}</h1>
                          <div className="flex items-center justify-end">
                            <BiEdit
                              className="w-[24px] h-[24px] fill-blue-500"
                              onClick={() => updateCategorie(item._id)}
                            />
                            <BiTrash
                              className="w-[24px] h-[24px] fill-red-500"
                              onClick={() => deleteCategorie(item._id)}
                            />
                          </div>
                        </div>
                      ))}
                    </div>
                    <div className="w-full pr-40">
                      <h1 className="text-text-lg pb-14  font-medium">
                        Sous Categories
                      </h1>
                      {/* eslint-disable-next-line @typescript-eslint/ban-ts-comment */}
                      {/* @ts-ignore */}
                      {sousCategories.map((item) => (
                        <div className="flex  border-b-[1px] border-gray-500 pb-8 items-center w-full justify-between">
                          <div>
                            <h1>{item.name}</h1>
                            <p>{item.categorie.name}</p>
                          </div>
                          <div className="flex items-center justify-end">
                            <BiEdit className="w-[24px] h-[24px] fill-blue-500" />
                            <BiTrash className="w-[24px] h-[24px] fill-red-500" />
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </Tabs.Content>
              </Tabs.Root>
            )}
          </div>
        </div>
      </main>
    </>
  );
};
Account.getInitialProps = async () => {
  const ProdsRes = await axios
    .get('http://localhost:5000/Product/getall')
    .catch((error) => {
      console.error(error);
    });

  const prods = await ProdsRes?.data;

  const CatRes = await axios
    .get('http://localhost:5000/categorie/getall')
    .catch((error) => {
      console.error(error);
    });

  const categories = await CatRes?.data;

  const SousCatRes = await axios
    .get('http://localhost:5000/sousCat/getall')
    .catch((error) => {
      console.error(error);
    });

  const sousCategories = await SousCatRes?.data;

  return { prods, categories, sousCategories };
};
export default Account;
