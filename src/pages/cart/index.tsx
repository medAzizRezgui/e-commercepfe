import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import React, { useState } from 'react';
import { BiX } from 'react-icons/bi';

import { Categories } from '../../components/shared/Categories';
import { Header } from '../../components/shared/Header';
import { Toast } from '../../components/shared/toast';
import { CartItem, useCart } from '../../context/Cart/CartContext';
import { Category } from '../../types/Category';
import { SousCategory } from '../../types/SousCategory';
import axiosProduction, { axiosDev } from '../api/axios';

const Cart = ({
  categories,
  sousCategories,
}: {
  categories: Category[];
  sousCategories: SousCategory[];
}) => {
  const { cartItems, addItem, removeItem } = useCart();

  const [coupon, setCoupon] = useState('');
  const [error, setError] = useState(false);
  const [success, setSuccess] = useState(false);
  const handleCoupon = async () => {
    setSuccess(false);
    setError(false);
    const res = await axiosProduction.get(`/coupon/${coupon}`);
    if (res.data.length === 0) {
      setError(true);
      setSuccess(false);
    }
    if (res.data.length > 0) {
      setError(false);
      setSuccess(true);
    }
  };
  const updateCart = (
    QT: number,
    itemQt: number,
    id: string,
    item: CartItem
  ) => {
    if (itemQt > QT) {
      removeItem(id, 1);
    }
    if (itemQt < QT) {
      addItem(item, 1);
    }
  };

  function calculateTotal() {
    const total = cartItems.reduce(
      (acc, item) => acc + item.price * item.quantity,
      0
    );

    return (total + 50).toFixed(2);
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Toast
          success={success}
          error={error}
          text="Added "
          errorMsgs={[{ msg: 'Not Found' }]}
        />
        <Header />
        {/* Categories */}
        <Categories categories={categories} sousCategories={sousCategories} />
        <h1 className="py-40 text-center text-display-md">Cart</h1>
        <div className="mx-auto w-full max-w-[1200px]">
          {/* Heading */}
          {cartItems?.length > 0 && (
            <div className="flex justify-between border-b-[1px] border-gray-500 pb-4">
              <p>Product</p>
              <div className="flex w-[25%] justify-between">
                <p>Price</p>
                <p>Quantity</p>
                <p>Subtotal</p>
              </div>
            </div>
          )}
          {/*  Item */}
          {cartItems.length <= 0 ? (
            <div>
              <h1 className="bg-yellow-500 px-24 py-40 text-center text-display-lg">
                Your cart is currently empty.
              </h1>
              <Link href="/shop">
                <button
                  type="button"
                  className="mx-auto my-20 block rounded-full bg-gray-500 px-24 py-8"
                >
                  Return To Shop
                </button>
              </Link>
            </div>
          ) : (
            cartItems.map((item) => (
              <div className="flex items-center justify-between border-b-[1px] border-gray-500 pb-4">
                <div className="flex items-center gap-[40px]">
                  <BiX
                    className="h-[25px] w-[25px] cursor-pointer"
                    onClick={() => removeItem(item.id, 999)}
                  />
                  <Image
                    src={item.image}
                    width={150}
                    height={150}
                    alt=""
                    className="max-w-[150px] py-8"
                  />
                  <h1>{item.name}</h1>
                </div>
                <div className="flex w-[25%] items-center  justify-between">
                  <p>{item.price.toFixed(2)} DT</p>
                  <input
                    min={0}
                    type="number"
                    defaultValue={item.quantity}
                    onChange={(e) =>
                      updateCart(
                        parseInt(e.currentTarget.value, 10),
                        item.quantity,
                        item.id,
                        item
                      )
                    }
                    className="block w-[50px] rounded-[12px] border-[1px] border-gray-400 px-8 py-4 "
                  />
                  <p>{(item.price * item.quantity).toFixed(2)} DT</p>
                </div>
              </div>
            ))
          )}

          {/*  Button */}
          {cartItems.length > 0 && (
            <div className="flex w-full flex-col items-end justify-end">
              <div className="flex w-full items-center justify-between">
                <div className="relative flex h-[50px] ">
                  <input
                    value={coupon}
                    onChange={(e) => setCoupon(e.currentTarget.value)}
                    type="text"
                    maxLength={10}
                    placeholder="coupon"
                    className="h-[50px] rounded-full border-2 px-24 py-8"
                  />
                  <button
                    type="button"
                    onClick={handleCoupon}
                    className="absolute left-[200px] top-0 h-[50px] w-[40%] rounded-r-full bg-dark-500 px-24  text-white"
                  >
                    Apply Coupon
                  </button>
                </div>
                <Link
                  href={{
                    pathname: '/checkout',
                    query: { coupon: success ? coupon : '' },
                  }}
                >
                  <button
                    type="button"
                    className="my-20 ml-auto block rounded-full bg-yellow-500 px-24 py-8 font-semibold"
                  >
                    Proceed to Checkout
                  </button>
                </Link>
              </div>
              {/* Cart Total */}
              <div>
                <h1 className="my-20 border-b-[2px] border-yellow-500 text-text-xl font-medium">
                  Cart Total
                </h1>
                <div className="flex items-center justify-between gap-[250px] border-b-[1px] border-gray-500 py-8">
                  <p className="text-text-sm font-semibold">Subtotal</p>
                  <p className="text-text-sm text-gray-400">
                    {calculateTotal()} DT
                  </p>
                </div>
                <div className="flex items-center justify-between gap-[250px] border-b-[1px] border-gray-500 py-8">
                  <p className="text-text-sm font-semibold">Shipping</p>
                  <p className="text-text-sm text-gray-400">50 DT</p>
                </div>
                <div className="flex items-center justify-between gap-[250px] border-b-[1px] border-gray-500 py-8">
                  <p className="text-text-sm font-semibold">Total</p>
                  <p className="text-text-sm font-semibold">
                    {calculateTotal()} DT
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>
        {/* Route */}
      </main>
    </>
  );
};
Cart.getInitialProps = async () => {
  const categoriesResponse = await axiosDev.get('/categorie/getall'); // replace with your API endpoint

  const categories = await categoriesResponse.data;
  const sousCatRes = await axiosDev.get('/sousCat/getall'); // replace with your API endpoint
  const sousCategories = await sousCatRes?.data;
  return { categories, sousCategories };
};
export default Cart;
