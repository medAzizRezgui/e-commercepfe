import Head from 'next/head';
import { useRouter } from 'next/router';
import React, { useState } from 'react';
import { BiChevronRight } from 'react-icons/bi';

import { Filter } from '../../components/pages/shop/Filter';
import { ShopHeader } from '../../components/pages/shop/Header';
import { SideCategories } from '../../components/pages/shop/SideCategories';
import { Categories } from '../../components/shared/Categories';
import { Header } from '../../components/shared/Header';
import { ProductCard } from '../../components/shared/ProductCard';
import { Product } from '../../types/Product';
import { SousCategory } from '../../types/SousCategory';
import axiosProduction from '../api/axios';

const Shop = ({
  data,
  transformedOptions,
  sousCategories,
}: {
  data: Product[];
  transformedOptions: { value: string; label: string }[];
  sousCategories: SousCategory[];
}) => {
  const router = useRouter();

  const pathQuery = router.query;
  const [sort, setSort] = useState('high');

  const [price, setPrice] = useState([
    data.reduce((min, item) => (item.price < min.price ? item : min)).price,
    data.reduce((max, item) => (item.price > max.price ? item : max)).price,
  ]);
  const [selectedCategorie, setSelectedCategorie] = useState(
    pathQuery.category ? pathQuery.category : 'all'
  );
  const [selectedSousCategory, setSelectedSousCategory] = useState(
    pathQuery.sousCategory ? pathQuery.sousCategory : 'all'
  );

  const handleCategoryChange = (val: string | string[]) => {
    setSelectedCategorie('');
    setSelectedSousCategory('all');
    setSelectedCategorie(val);
  };
  let filtredItems = data.filter(
    (item) =>
      item.price >= price[0] &&
      item.price <= price[1] &&
      (selectedSousCategory === 'all'
        ? true
        : item.sousCategorie._id === selectedSousCategory) &&
      (selectedCategorie === 'all'
        ? true
        : item.categorie._id === selectedCategorie)
  );
  if (pathQuery.word) {
    filtredItems = filtredItems.filter((item) =>
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      item.name.toLowerCase().includes(pathQuery?.word?.toLowerCase())
    );
  }

  return (
    <>
      <Head>
        <title>Shop</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Header />
        {/* Categories */}
        <Categories />
        <div className="mx-auto mt-112  flex max-w-[1400px] items-center gap-[10px] px-16 py-16 text-text-sm">
          <h1>Home</h1>
          <BiChevronRight className="h-[20px] w-[20px]" />
          <h1>Shop</h1>
        </div>
        <div className="mx-auto flex w-full max-w-[1400px]">
          {/* Filter */}
          <div className="w-[20%]">
            <SideCategories
              sousCategories={sousCategories}
              options={transformedOptions}
              setSelectedCategorie={handleCategoryChange}
              setSelectedSousCategorie={setSelectedSousCategory}
              selectedCategory={selectedCategorie}
            />
            <Filter data={data} setPrice={setPrice} price={price} />
          </div>
          <div className="mx-40 w-[80%]">
            <ShopHeader setSort={setSort} />
            {pathQuery.word && (
              <h1 className="pb-14">Results for {pathQuery.word} :</h1>
            )}
            <div className="grid grid-cols-4 gap-[0px]">
              {filtredItems
                .sort((a, b) =>
                  sort === 'low' ? a.price - b.price : b.price - a.price
                )
                .map((prod) => (
                  <ProductCard data={prod} />
                ))}
            </div>
          </div>
        </div>
        {/* Route */}
      </main>
    </>
  );
};
Shop.getInitialProps = async () => {
  const res = await axiosProduction.get('/Product/getall').catch((error) => {
    console.error(error);
  });

  const data = await res?.data;

  const response = await axiosProduction.get('/categorie/getall'); // replace with your API endpoint
  const transformedOptions = response.data.map((option: any) => ({
    // eslint-disable-next-line no-underscore-dangle
    value: option._id,
    label: option.name,
  }));

  const sousCatRes = await axiosProduction.get('/sousCat/getall'); // replace with your API endpoint
  const sousCategories = await sousCatRes?.data;
  return { data, transformedOptions, sousCategories };
};

export default Shop;
