import Head from 'next/head';
import { useRouter } from 'next/router';
import React, { useEffect, useState } from 'react';
import { BiChevronRight } from 'react-icons/bi';

import { Filter } from '../../components/pages/shop/Filter';
import { ShopHeader } from '../../components/pages/shop/Header';
import { SideCategories } from '../../components/pages/shop/SideCategories';
import { Categories } from '../../components/shared/Categories';
import { Footer } from '../../components/shared/Footer';
import { Header } from '../../components/shared/Header';
import { ProductCard } from '../../components/shared/ProductCard';
import { Category } from '../../types/Category';
import { Product } from '../../types/Product';
import { SousCategory } from '../../types/SousCategory';
import axiosProduction, { axiosDev } from '../api/axios';

const Shop = ({
  data,
  categories,
  sousCategories,
}: {
  data: Product[];
  categories: Category[];
  sousCategories: SousCategory[];
}) => {
  const router = useRouter();
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalItems, setTotalItems] = useState(0);
  const [products, setProducts] = useState(data);
  const transformedOptions = categories.map((option: any) => ({
    // eslint-disable-next-line no-underscore-dangle
    value: option._id,
    label: option.name,
  }));

  const pathQuery = router.query;
  const [sort, setSort] = useState('high');
  const [price, setPrice] = useState([
    products.reduce((min, item) => (item.price < min.price ? item : min)).price,
    products.reduce((max, item) => (item.price > max.price ? item : max)).price,
  ]);
  const [selectedCategorie, setSelectedCategorie] = useState(
    pathQuery.category ? pathQuery.category : 'all'
  );
  const [selectedSousCategory, setSelectedSousCategory] = useState(
    pathQuery.sousCategory ? pathQuery.sousCategory : 'all'
  );

  useEffect(() => {
    const getProducts = () => {
      axiosDev
        .get(`/product/getall?page=${page}`)
        .then((res) => {
          setProducts(res.data.products);
          setTotalPages(res.data.totalPages);
          setTotalItems(res.data.totalItems);
          window.scrollTo({ top: 0, behavior: 'smooth' });
        })
        .catch((err) => {
          console.log(err);
        });
    };
    getProducts();
  }, [page]);

  const handleCategoryChange = (val: string | string[]) => {
    setSelectedCategorie('');
    setSelectedSousCategory('all');
    setSelectedCategorie(val);
  };
  let filtredItems = products.filter(
    (item) =>
      item.price >= price[0] &&
      item.price <= price[1] &&
      (selectedSousCategory === 'all'
        ? true
        : item.sousCategorie._id === selectedSousCategory) &&
      (selectedCategorie === 'all'
        ? true
        : item.categorie._id === selectedCategorie)
  );
  if (pathQuery.word) {
    filtredItems = filtredItems.filter((item) =>
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      item.name.toLowerCase().includes(pathQuery?.word?.toLowerCase())
    );
  }

  return (
    <>
      <Head>
        <title>Shop</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Header />
        {/* Categories */}
        <Categories categories={categories} sousCategories={sousCategories} />
        <div className="mx-auto mt-112  flex max-w-[1400px] items-center gap-[10px] px-16 py-16 text-text-sm">
          <h1>Home</h1>
          <BiChevronRight className="h-[20px] w-[20px]" />
          <h1>Shop</h1>
        </div>
        <div className="mx-auto flex w-full max-w-[1400px]">
          {/* Filter */}
          <div className="w-[20%]">
            <SideCategories
              sousCategories={sousCategories}
              options={transformedOptions}
              setSelectedCategorie={handleCategoryChange}
              setSelectedSousCategorie={setSelectedSousCategory}
              selectedCategory={selectedCategorie}
            />
            <Filter data={products} setPrice={setPrice} price={price} />
          </div>
          <div className="mx-40 w-[80%]">
            <ShopHeader setSort={setSort} />
            {pathQuery.word && (
              <h1 className="pb-14">Results for {pathQuery.word} :</h1>
            )}
            <div className="grid grid-cols-4 gap-[0px]">
              {filtredItems
                .sort((a, b) =>
                  sort === 'low' ? a.price - b.price : b.price - a.price
                )
                .map((prod) => (
                  <ProductCard data={prod} />
                ))}
            </div>
            <div className="my-20 flex w-full items-center justify-between py-8">
              <p>
                Showing 1-{filtredItems.length} of {totalItems} results
              </p>
              <div className="flex items-center gap-[8px]">
                {[...Array(totalPages)].map((_, index) => (
                  // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
                  <span
                    onClick={() => setPage(index + 1)}
                    className={`${
                      page === index + 1
                        ? 'bg-yellow-500'
                        : 'border-[1px] border-gray-500 bg-white'
                    } block flex h-[30px] w-[30px] cursor-pointer items-center justify-center rounded-full  text-dark-500`}
                  >
                    {index + 1}
                  </span>
                ))}
              </div>
            </div>
          </div>
        </div>
        <Footer categories={categories} />
      </main>
    </>
  );
};
Shop.getInitialProps = async () => {
  const res = await axiosDev.get('/Product/getall').catch((error) => {
    console.error(error);
  });

  const data = await res?.data.products;

  const categoriesResponse = await axiosDev.get('/categorie/getall'); // replace with your API endpoint

  const categories = await categoriesResponse.data;
  const sousCatRes = await axiosDev.get('/sousCat/getall'); // replace with your API endpoint
  const sousCategories = await sousCatRes?.data;
  return { data, categories, sousCategories };
};

export default Shop;
